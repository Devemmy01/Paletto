import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching'
import { NavigationRoute, registerRoute } from 'workbox-routing'
import { CacheFirst, StaleWhileRevalidate } from 'workbox-strategies'
import { CacheableResponsePlugin } from 'workbox-cacheable-response'
import { ExpirationPlugin } from 'workbox-expiration'

declare const self: ServiceWorkerGlobalScope

// Precache all assets generated by vite
precacheAndRoute(self.__WB_MANIFEST)

// Handle navigation requests with a Network-First strategy
const handler = createHandlerBoundToURL('index.html')
const navigationRoute = new NavigationRoute(handler)
registerRoute(navigationRoute)

// Cache icons specifically
registerRoute(
  ({ request, url }) => 
    request.destination === 'image' && url.pathname.includes('/icons/'),
  new CacheFirst({
    cacheName: 'app-icons',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new ExpirationPlugin({
        maxEntries: 10,
        maxAgeSeconds: 60 * 60 * 24 * 30 // 30 days
      })
    ]
  })
)

// Cache static assets
registerRoute(
  ({ request }) => 
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'worker',
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      })
    ]
  })
)

// Cache other images
registerRoute(
  ({ request, url }) => 
    request.destination === 'image' && !url.pathname.includes('/icons/'),
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 60 * 60 * 24 * 30 // 30 days
      })
    ]
  })
)

// Handle offline fallback
self.addEventListener('install', (event: ExtendableEvent) => {
  event.waitUntil(
    Promise.all([
      caches.open('offline-cache').then((cache) => {
        return cache.add('/index.html')
      }),
      caches.open('app-icons').then((cache) => {
        return cache.addAll([
          '/icons/favicon-96x96.png',
          '/icons/icon-192x192.png',
          '/icons/web-app-manifest-192x192.png',
          '/icons/icon-512x512.png',
          '/icons/web-app-manifest-512x512.png',
          '/icons/apple-touch-icon.png',
          '/icons/favicon.ico',
          '/icons/favicon.svg'
        ])
      })
    ])
  )
})

// Activate the service worker immediately
self.addEventListener('activate', (event: ExtendableEvent) => {
  event.waitUntil(
    Promise.all([
      self.clients.claim(),
      // Clean up old caches
      caches.keys().then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (!['offline-cache', 'app-icons'].includes(cacheName)) {
              return caches.delete(cacheName)
            }
          })
        )
      })
    ])
  )
}) 